PROTOS_PATH = proto
GO 					= service.pb.go service.pb.gw.go swagger.go
JSON				= swagger/service.swagger.json

PACKAGE			= $(shell grep go_package $(PROTOS_PATH)/service.proto | sed 's/option go_package = "\(.*\)";/\1/')

.PHONY: default
default: build swagger

.PHONY: build
build:
	protoc --proto_path=$(PROTOS_PATH) -I$(PROTOS_PATH) $(PROTOC_INC) --go_out=plugins=grpc:. $(PROTOS_PATH)/*.proto
	protoc --proto_path=$(PROTOS_PATH) -I$(PROTOS_PATH) $(PROTOC_INC) --grpc-gateway_out=logtostderr=true:. $(PROTOS_PATH)/service.proto
	protoc --proto_path=$(PROTOS_PATH) -I$(PROTOS_PATH) $(PROTOC_INC) --swagger_out=logtostderr=true:swagger $(PROTOS_PATH)/service.proto

.PHONY: swagger
swagger:
	(	echo '// Code generated by Makefile. DO NOT EDIT.'; \
		echo '// source: service.proto and service.swagger.json'; echo; \
		echo 'package $(PACKAGE)'; echo; \
		echo 'var Swagger = []byte(`'; \
		cat swagger/service.swagger.json | sed 's/`/`+"`"+`/g'; \
		echo '`)' \
	) > swagger.go
	go fmt swagger.go

# swagger.go can also be done using `go generate .` but to keep it simple, we
# use the magic of bash and make

clean:
	$(RM) -f *.go swagger/*.json

.PHONY: default build swagger clean