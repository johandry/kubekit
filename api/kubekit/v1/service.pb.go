// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 690 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xdd, 0x4e, 0x13, 0x41,
	0x18, 0x4d, 0x97, 0x9f, 0x9a, 0x01, 0x04, 0x46, 0x12, 0x70, 0x21, 0x38, 0x56, 0x2d, 0xb1, 0xd2,
	0x6e, 0x8b, 0x68, 0x4c, 0x0d, 0x51, 0xa4, 0x89, 0xc1, 0x12, 0x23, 0x05, 0x4c, 0xc4, 0x0b, 0xb2,
	0xec, 0x7e, 0x6e, 0x87, 0x6e, 0x67, 0xd6, 0x9d, 0xe9, 0xa2, 0x31, 0xc6, 0xc4, 0x47, 0xd0, 0x78,
	0xe3, 0xcb, 0x78, 0xe9, 0x03, 0xf8, 0x0a, 0x5e, 0xfa, 0x10, 0x66, 0x67, 0x67, 0x63, 0x57, 0x0a,
	0xbd, 0xda, 0x9d, 0x73, 0xbe, 0x39, 0xe7, 0x3b, 0xdf, 0xce, 0x0e, 0x9a, 0x12, 0x10, 0x46, 0xd4,
	0x81, 0x4a, 0x10, 0x72, 0xc9, 0x31, 0xea, 0xf4, 0x8e, 0xa1, 0x43, 0x65, 0x25, 0xaa, 0x99, 0x4b,
	0x1e, 0xe7, 0x9e, 0x0f, 0x96, 0x1d, 0x50, 0xcb, 0x66, 0x8c, 0x4b, 0x5b, 0x52, 0xce, 0x44, 0x52,
	0x69, 0xae, 0xaa, 0x87, 0x53, 0xf6, 0x80, 0x95, 0xc5, 0xa9, 0xed, 0x79, 0x10, 0x5a, 0x3c, 0x50,
	0x15, 0x03, 0xaa, 0xa7, 0x22, 0x08, 0x05, 0xe5, 0x4c, 0x2f, 0x27, 0x24, 0xef, 0x40, 0xba, 0x40,
	0x94, 0x51, 0x99, 0x12, 0x76, 0x10, 0xf8, 0xef, 0xf5, 0x62, 0xd2, 0x05, 0x1f, 0xa4, 0x6e, 0xcd,
	0x9c, 0xf5, 0x40, 0x1e, 0x39, 0x7e, 0x4f, 0x48, 0x08, 0x35, 0x74, 0xd9, 0x05, 0xe1, 0x84, 0xf4,
	0x38, 0x2d, 0x99, 0xec, 0x05, 0xae, 0x9d, 0x6e, 0x58, 0xfb, 0x93, 0x47, 0xf9, 0x66, 0x12, 0x07,
	0xbf, 0x46, 0xf9, 0x97, 0x49, 0x07, 0xd8, 0xac, 0xfc, 0xcb, 0x58, 0xd1, 0x60, 0x0b, 0xde, 0xf6,
	0x40, 0x48, 0x73, 0x71, 0x20, 0x27, 0x02, 0xce, 0x04, 0x14, 0xe6, 0x3f, 0xff, 0xfa, 0xfd, 0xd5,
	0x98, 0xc5, 0xd3, 0x6a, 0x22, 0x51, 0xcd, 0xd2, 0x99, 0xf0, 0x09, 0x1a, 0xdb, 0x8f, 0xf3, 0xe0,
	0x85, 0xfe, 0xed, 0x0a, 0x4a, 0x85, 0xaf, 0x0e, 0x60, 0xb4, 0xec, 0xaa, 0x92, 0x2d, 0xe2, 0x9b,
	0xa9, 0xac, 0xce, 0x68, 0x7d, 0xd0, 0x2f, 0x47, 0xcc, 0xee, 0xc2, 0x47, 0x4b, 0x8d, 0x0c, 0x1f,
	0xa0, 0xd1, 0x6d, 0x46, 0x25, 0x9e, 0xef, 0x17, 0x8c, 0x91, 0xd4, 0x69, 0xe1, 0x2c, 0xa1, 0x8d,
	0x4c, 0x65, 0x34, 0x57, 0x98, 0xfe, 0xcf, 0xa8, 0x9e, 0x2b, 0x61, 0x0f, 0x8d, 0x6d, 0xc6, 0x93,
	0xcf, 0x46, 0x50, 0xd0, 0xc0, 0x08, 0x9a, 0xd1, 0xca, 0xb7, 0x95, 0xf2, 0x8d, 0xc2, 0xf2, 0xc5,
	0x11, 0x12, 0xa3, 0xf1, 0x86, 0xfa, 0xaa, 0x38, 0xa3, 0x97, 0x60, 0xa9, 0x95, 0x39, 0x88, 0xd2,
	0x5e, 0x45, 0xe5, 0x45, 0x4a, 0x43, 0xbc, 0xb0, 0x87, 0x26, 0x9e, 0x82, 0xdc, 0x4a, 0x30, 0x81,
	0x97, 0xfb, 0x25, 0xfb, 0x88, 0xd4, 0xf2, 0xda, 0xb9, 0xfc, 0x79, 0x5f, 0x5f, 0xdb, 0xe1, 0x2e,
	0xba, 0xd4, 0xd0, 0xc7, 0x10, 0x2f, 0x66, 0x1b, 0x4f, 0xd0, 0xd4, 0x62, 0x69, 0x30, 0x99, 0xcd,
	0x85, 0x87, 0xe5, 0xfa, 0x96, 0x43, 0x57, 0x92, 0x91, 0xe8, 0x16, 0xb7, 0x38, 0x7b, 0x43, 0x3d,
	0x5c, 0x3c, 0x3b, 0xb3, 0x4c, 0x41, 0xda, 0xc5, 0xca, 0xd0, 0x3a, 0xdd, 0x50, 0x59, 0x35, 0xb4,
	0x52, 0xba, 0x35, 0xe4, 0x5c, 0x3a, 0x89, 0xff, 0x27, 0x34, 0x75, 0xa0, 0xfe, 0x3e, 0xad, 0x86,
	0x49, 0xbf, 0x51, 0x86, 0x4a, 0x5b, 0xb9, 0x7e, 0x41, 0x45, 0xf6, 0x64, 0x99, 0xc3, 0x4f, 0xd6,
	0x93, 0x9f, 0xc6, 0x97, 0xcd, 0x1f, 0x06, 0xde, 0x46, 0xd3, 0xf1, 0x4f, 0xdf, 0xa4, 0x92, 0xec,
	0x25, 0x57, 0x5b, 0xa1, 0x96, 0xdc, 0x03, 0x4d, 0x2a, 0xf1, 0x5c, 0x5b, 0xca, 0x40, 0xd4, 0x2d,
	0x2b, 0x75, 0x76, 0x21, 0xb2, 0xcc, 0x19, 0x09, 0x76, 0xf7, 0x71, 0x1f, 0xb4, 0x36, 0x52, 0xab,
	0x54, 0x4b, 0x46, 0xce, 0x58, 0x9b, 0x89, 0x2f, 0x24, 0xea, 0xa8, 0xcb, 0xcc, 0x3a, 0x11, 0x9c,
	0xd5, 0xcf, 0x20, 0xad, 0x87, 0x68, 0x64, 0xbd, 0xba, 0x8e, 0xd7, 0x51, 0xa9, 0x05, 0xb2, 0x17,
	0x32, 0x70, 0xc9, 0x69, 0x1b, 0x18, 0x91, 0x6d, 0x20, 0x21, 0x08, 0xde, 0x0b, 0x1d, 0x20, 0x2e,
	0x07, 0x41, 0x18, 0x97, 0x04, 0xde, 0x51, 0x21, 0x2b, 0x78, 0x1c, 0x8d, 0x7e, 0x37, 0x72, 0xf9,
	0xd6, 0x66, 0xbc, 0xb9, 0x8a, 0xeb, 0xe8, 0x41, 0x76, 0xb3, 0x4d, 0xc2, 0x64, 0x4c, 0x84, 0x0a,
	0x42, 0x59, 0x64, 0xfb, 0xd4, 0x25, 0x3c, 0x24, 0x5d, 0x2a, 0x04, 0x65, 0x1e, 0x09, 0xec, 0xd0,
	0xee, 0x42, 0x7c, 0x44, 0xc3, 0x67, 0x68, 0x31, 0x8d, 0xdc, 0x80, 0x08, 0x7c, 0x1e, 0x74, 0x81,
	0x49, 0x52, 0x26, 0x7b, 0xbe, 0xed, 0x74, 0xf0, 0x1d, 0x11, 0x3f, 0xea, 0x96, 0xe5, 0xb4, 0x6d,
	0xc6, 0xc0, 0x7f, 0x14, 0xa7, 0xdd, 0xd8, 0xdf, 0x7d, 0x5e, 0xdd, 0xb9, 0x77, 0x78, 0x50, 0x2b,
	0x52, 0x77, 0x63, 0x6b, 0xf7, 0xd5, 0xfd, 0x17, 0xcd, 0x9d, 0x46, 0xe3, 0xd0, 0x88, 0x6a, 0xc7,
	0xe3, 0xea, 0xfe, 0xbc, 0xfb, 0x37, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x93, 0x2e, 0x38, 0x1c, 0x06,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KubekitClient is the client API for Kubekit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KubekitClient interface {
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetClusters(ctx context.Context, in *GetClustersRequest, opts ...grpc.CallOption) (*GetClustersResponse, error)
	Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error)
	DeleteClusterConfig(ctx context.Context, in *DeleteClusterConfigRequest, opts ...grpc.CallOption) (*DeleteClusterConfigResponse, error)
	UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*UpdateClusterResponse, error)
}

type kubekitClient struct {
	cc *grpc.ClientConn
}

func NewKubekitClient(cc *grpc.ClientConn) KubekitClient {
	return &kubekitClient{cc}
}

func (c *kubekitClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/kubekit.v1.Kubekit/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubekitClient) Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/kubekit.v1.Kubekit/Token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubekitClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, "/kubekit.v1.Kubekit/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubekitClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error) {
	out := new(ApplyResponse)
	err := c.cc.Invoke(ctx, "/kubekit.v1.Kubekit/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubekitClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/kubekit.v1.Kubekit/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubekitClient) GetClusters(ctx context.Context, in *GetClustersRequest, opts ...grpc.CallOption) (*GetClustersResponse, error) {
	out := new(GetClustersResponse)
	err := c.cc.Invoke(ctx, "/kubekit.v1.Kubekit/GetClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubekitClient) Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error) {
	out := new(DescribeResponse)
	err := c.cc.Invoke(ctx, "/kubekit.v1.Kubekit/Describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubekitClient) DeleteClusterConfig(ctx context.Context, in *DeleteClusterConfigRequest, opts ...grpc.CallOption) (*DeleteClusterConfigResponse, error) {
	out := new(DeleteClusterConfigResponse)
	err := c.cc.Invoke(ctx, "/kubekit.v1.Kubekit/DeleteClusterConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubekitClient) UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*UpdateClusterResponse, error) {
	out := new(UpdateClusterResponse)
	err := c.cc.Invoke(ctx, "/kubekit.v1.Kubekit/UpdateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubekitServer is the server API for Kubekit service.
type KubekitServer interface {
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	Token(context.Context, *TokenRequest) (*TokenResponse, error)
	Init(context.Context, *InitRequest) (*InitResponse, error)
	Apply(context.Context, *ApplyRequest) (*ApplyResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	GetClusters(context.Context, *GetClustersRequest) (*GetClustersResponse, error)
	Describe(context.Context, *DescribeRequest) (*DescribeResponse, error)
	DeleteClusterConfig(context.Context, *DeleteClusterConfigRequest) (*DeleteClusterConfigResponse, error)
	UpdateCluster(context.Context, *UpdateClusterRequest) (*UpdateClusterResponse, error)
}

// UnimplementedKubekitServer can be embedded to have forward compatible implementations.
type UnimplementedKubekitServer struct {
}

func (*UnimplementedKubekitServer) Version(ctx context.Context, req *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedKubekitServer) Token(ctx context.Context, req *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}
func (*UnimplementedKubekitServer) Init(ctx context.Context, req *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (*UnimplementedKubekitServer) Apply(ctx context.Context, req *ApplyRequest) (*ApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (*UnimplementedKubekitServer) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedKubekitServer) GetClusters(ctx context.Context, req *GetClustersRequest) (*GetClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusters not implemented")
}
func (*UnimplementedKubekitServer) Describe(ctx context.Context, req *DescribeRequest) (*DescribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}
func (*UnimplementedKubekitServer) DeleteClusterConfig(ctx context.Context, req *DeleteClusterConfigRequest) (*DeleteClusterConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClusterConfig not implemented")
}
func (*UnimplementedKubekitServer) UpdateCluster(ctx context.Context, req *UpdateClusterRequest) (*UpdateClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCluster not implemented")
}

func RegisterKubekitServer(s *grpc.Server, srv KubekitServer) {
	s.RegisterService(&_Kubekit_serviceDesc, srv)
}

func _Kubekit_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubekitServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubekit.v1.Kubekit/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubekitServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kubekit_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubekitServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubekit.v1.Kubekit/Token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubekitServer).Token(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kubekit_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubekitServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubekit.v1.Kubekit/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubekitServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kubekit_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubekitServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubekit.v1.Kubekit/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubekitServer).Apply(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kubekit_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubekitServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubekit.v1.Kubekit/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubekitServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kubekit_GetClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubekitServer).GetClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubekit.v1.Kubekit/GetClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubekitServer).GetClusters(ctx, req.(*GetClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kubekit_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubekitServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubekit.v1.Kubekit/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubekitServer).Describe(ctx, req.(*DescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kubekit_DeleteClusterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubekitServer).DeleteClusterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubekit.v1.Kubekit/DeleteClusterConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubekitServer).DeleteClusterConfig(ctx, req.(*DeleteClusterConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kubekit_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubekitServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubekit.v1.Kubekit/UpdateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubekitServer).UpdateCluster(ctx, req.(*UpdateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kubekit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kubekit.v1.Kubekit",
	HandlerType: (*KubekitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Kubekit_Version_Handler,
		},
		{
			MethodName: "Token",
			Handler:    _Kubekit_Token_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _Kubekit_Init_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _Kubekit_Apply_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Kubekit_Delete_Handler,
		},
		{
			MethodName: "GetClusters",
			Handler:    _Kubekit_GetClusters_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Kubekit_Describe_Handler,
		},
		{
			MethodName: "DeleteClusterConfig",
			Handler:    _Kubekit_DeleteClusterConfig_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _Kubekit_UpdateCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
