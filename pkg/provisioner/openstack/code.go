package openstack

// Code generated automatically by 'go run codegen/main.go --pkg <pkg> --src <pkg>/templates --dst <pkg>/code.go'; DO NOT EDIT THIS FILE.

func init() {
	ResourceTemplates = map[string]string{
		"outputs":   outputsTpl,
		"provider":  providerTpl,
		"resources": resourcesTpl,
		"variables": variablesTpl,
	}
}

// Expressions in the templates
/**
outputs : {{ $masterNodePool := MasterPool $.NodePools }}
outputs : {{- if $.KubeVirtualIPApi -}}
outputs : {{- $.KubeVirtualIPApi -}}
outputs : {{- else -}}
outputs : {{ Dash ( Lower $masterNodePool.Name ) }}
outputs : {{- end }}
outputs : {{- if and $.KubeVirtualIPApi $.KubeVIPAPISSLPort -}}
outputs : {{- $.KubeVIPAPISSLPort -}}
outputs : {{- else -}}
outputs : {{- $.KubeAPISSLPort -}}
outputs : {{- end }}
outputs : {{- range $k, $v := $.NodePools -}}
outputs : {{- range $i := Count $v.Count  }}
outputs : {{- Dash ( Lower $v.Name ) }}
outputs : {{ $i }}
outputs : {{- Dash ( Lower $k ) }}
outputs : {{ $i }}
outputs : {{- Dash ( Lower $v.Name ) }}
outputs : {{ $i }}
outputs : {{- Dash ( Lower $v.Name ) }}
outputs : {{ $i }}
outputs : {{ $v.Name }}
outputs : {{ Dash ( Lower $k ) }}
outputs : {{ end }}
outputs : {{ end }}
resources : {{ $.OpenstackRegion }}
resources : {{ Dash ( Lower $.ClusterName ) }}
resources : {{ Trim $.PublicKey }}
resources : {{ range $k, $v := .NodePools }}
resources : {{ Dash ( Lower $v.Name ) }}
resources : {{ Dash ( Lower $k ) }}
resources : {{ $v.Count }}
resources : {{ Dash ( Lower $.ClusterName ) }}
resources : {{ Dash ( Lower $k ) }}
resources : {{ $v.OpenstackImageID }}
resources : {{ $v.OpenstackFlavorID }}
resources : {{ QuoteList $v.SecurityGroups }}
resources : {{ $.OpenstackNetName }}
resources : {{ Dash ( Lower $k ) }}
resources : {{ $v.Count }}
resources : {{ Dash ( Lower $k ) }}
resources : {{ Dash ( Lower $v.Name ) }}
resources : {{ Dash ( Lower $k ) }}
resources : {{ $v.Count }}
resources : {{ Dash ( Lower $k ) }}
resources : {{ Dash ( Lower $v.Name ) }}
resources : {{ Dash ( Lower $k ) }}
resources : {{ Dash ( Lower $k ) }}
resources : {{ Dash ( Lower $v.Name ) }}
resources : {{ $v.Count }}
resources : {{ $.Username }}
resources : {{ Dash ( Lower $k ) }}
resources : {{ end }}
**/

const outputsTpl = `{{ $masterNodePool := MasterPool $.NodePools }}

output "service_ip" {
  value =
{{- if $.KubeVirtualIPApi -}}
  "{{- $.KubeVirtualIPApi -}}"
{{- else -}}
  openstack_compute_floatingip_associate_v2.float_assoc-{{ Dash ( Lower $masterNodePool.Name ) }}.0.floating_ip
{{- end }}
}

output "service_port" {
  value = "
{{- if and $.KubeVirtualIPApi $.KubeVIPAPISSLPort -}}
  {{- $.KubeVIPAPISSLPort -}} 
{{- else -}} 
  {{- $.KubeAPISSLPort -}}
{{- end }}"
}

output "nodes" {
 	value = [ {{- range $k, $v := $.NodePools -}} {{- range $i := Count $v.Count  }}
    "{\"private_ip\": \"${openstack_compute_instance_v2.
    {{- Dash ( Lower $v.Name ) }}.{{ $i }}.access_ip_v4}\",\"public_ip\": \"${openstack_compute_floatingip_associate_v2.float_assoc-
    {{- Dash ( Lower $k ) }}.{{ $i }}.floating_ip}\",\"public_dns\": \"${openstack_compute_instance_v2.
    {{- Dash ( Lower $v.Name ) }}.{{ $i }}.name}\",\"private_dns\": \"${openstack_compute_instance_v2.
    {{- Dash ( Lower $v.Name ) }}.{{ $i }}.name}\",\"pool\": \"{{ $v.Name }}\",\"role\": \"{{ Dash ( Lower $k ) }}\"}",{{ end }}{{ end }}
  ]
}`

const providerTpl = `provider "openstack" {
  user_name     = var.openstack_user_name
  tenant_name   = var.openstack_tenant_name
  password      = var.openstack_password
  auth_url      = var.openstack_auth_url
  domain_name   = var.openstack_domain_name
  insecure      = "true"
}
`

const resourcesTpl = `// resources.tf collects creates the resources that will be used with the image.  Be careful with what you create as a
// resource, as you can overwrite existing infrastructure easily.

resource "openstack_compute_keypair_v2" "keypair" {
  region     = "{{ $.OpenstackRegion }}"
  name       = "{{ Dash ( Lower $.ClusterName ) }}-keypair"
  public_key = "{{ Trim $.PublicKey }}\n"
}

{{ range $k, $v := .NodePools }}

resource "openstack_compute_instance_v2" "{{ Dash ( Lower $v.Name ) }}" {
  depends_on      = ["openstack_networking_floatingip_v2.float-{{ Dash ( Lower $k ) }}"]
  count           = "{{ $v.Count }}"
  name            = "{{ Dash ( Lower $.ClusterName ) }}-{{ Dash ( Lower $k ) }}-${format("%02d", count.index+1)}"
  image_id        = "{{ $v.OpenstackImageID }}"
  flavor_id       = "{{ $v.OpenstackFlavorID }}"
  key_pair        = openstack_compute_keypair_v2.keypair.id
  security_groups = [{{ QuoteList $v.SecurityGroups }}]

  // TODO: with templating, this can be extended create multiple networks and interfaces
  // Allowing for a hw / bynet like environment
  network {
    name           = "{{ $.OpenstackNetName }}"
    access_network = true
  }
}

resource "openstack_networking_floatingip_v2" "float-{{ Dash ( Lower $k ) }}" {
  count = "{{ $v.Count }}"
  pool  = "public"
}

resource "openstack_compute_floatingip_associate_v2" "float_assoc-{{ Dash ( Lower $k ) }}" {
  depends_on = ["openstack_compute_instance_v2.{{ Dash ( Lower $v.Name ) }}",
    "openstack_networking_floatingip_v2.float-{{ Dash ( Lower $k ) }}",
  ]

  count       = "{{ $v.Count }}"
  floating_ip = element(openstack_networking_floatingip_v2.float-{{ Dash ( Lower $k ) }}.*.address, count.index)
  instance_id = element(openstack_compute_instance_v2.{{ Dash ( Lower $v.Name ) }}.*.id, count.index)
}

resource "null_resource" "wait-{{ Dash ( Lower $k ) }}" {
  depends_on = [
    "openstack_compute_floatingip_associate_v2.float_assoc-{{ Dash ( Lower $k ) }}",
    "openstack_compute_instance_v2.{{ Dash ( Lower $v.Name ) }}",
  ]

  count       = "{{ $v.Count }}"

  connection {
    user        = "{{ $.Username }}"
    host        = element(openstack_networking_floatingip_v2.float-{{ Dash ( Lower $k ) }}.*.address, count.index)
    private_key = var.private_key
    timeout     = "5m"
  }

  provisioner "file" {
    content      = "terraform was able to ssh to the instance'"
    destination = "/tmp/terraform.up"
  }
}
{{ end }}
`

const variablesTpl = `variable "openstack_tenant_name" {}
variable "openstack_auth_url" {}
variable "openstack_user_name"   {}
variable "openstack_password"   {}
variable "openstack_domain_name"   {}
variable "openstack_region"   {}
variable "private_key"   {}
`
