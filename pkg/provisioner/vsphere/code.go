package vsphere

// Code generated automatically by 'go run codegen/main.go --pkg <pkg> --src <pkg>/templates --dst <pkg>/code.go'; DO NOT EDIT THIS FILE.

func init() {
	ResourceTemplates = map[string]string{
		"data-sources": dataSourcesTpl,
		"output":       outputTpl,
		"provider":     providerTpl,
		"resources":    resourcesTpl,
		"variables":    variablesTpl,
	}
}

// Expressions in the templates
/**
data-sources : {{ .Datacenter }}
data-sources : {{ .Datastore }}
data-sources : {{ .ResourcePool }}
data-sources : {{ .VsphereNet }}
data-sources : {{ range $k, $v := .NodePools }}
data-sources : {{ Dash ( Lower $v.Name ) }}
data-sources : {{ $v.TemplateName }}
data-sources : {{ end }}
output : {{ $masterNodePool := MasterPool $.NodePools }}
output : {{- if $.KubeVirtualIPApi -}}
output : {{- $.KubeVirtualIPApi -}}
output : {{- else -}}
output : {{ Dash ( Lower $masterNodePool.Name ) }}
output : {{- end }}
output : {{- if and $.KubeVirtualIPApi $.KubeVIPAPISSLPort -}}
output : {{- $.KubeVIPAPISSLPort -}}
output : {{- else -}}
output : {{- $.KubeAPISSLPort -}}
output : {{- end }}
output : {{- range $k, $v := $.NodePools -}}
output : {{- range $i := Count $v.Count  }}
output : {{- Dash ( Lower $v.Name ) }}
output : {{ $i }}
output : {{- Dash ( Lower $v.Name ) }}
output : {{ $i }}
output : {{- Dash ( Lower $v.Name ) }}
output : {{ $i }}
output : {{- Dash ( Lower $v.Name ) }}
output : {{ $i }}
output : {{ $v.Name }}
output : {{ Dash ( Lower $k ) }}
output : {{ end }}
output : {{ end }}
resources : {{ range $k, $v := .NodePools }}
resources : {{ Dash ( Lower $v.Name ) }}
resources : {{ $v.Count }}
resources : {{ ExtractAddressPoolToTFIndexMap $v.AddressPool "hostname" }}
resources : {{ Dash ( Lower $.ClusterName ) }}
resources : {{ Dash ( Lower $k ) }}
resources : {{ $.Folder }}
resources : {{ $v.CPUs }}
resources : {{ $v.Memory }}
resources : {{- Dash ( Lower $v.Name ) -}}
resources : {{- Dash ( Lower $v.Name ) -}}
resources : {{- Dash ( Lower $v.Name ) -}}
resources : {{ Dash ( Lower $.ClusterName ) }}
resources : {{ Dash ( Lower $k ) }}
resources : {{ $v.RootVolSize }}
resources : {{ Dash ( Lower $v.Name ) }}
resources : {{ Dash ( Lower $v.Name ) }}
resources : {{ Dash ( Lower $.ClusterName ) }}
resources : {{ Dash ( Lower $k ) }}
resources : {{ Trim $.PublicKey }}
resources : {{ $v.LinkedClone }}
resources : {{ Dash ( Lower $v.Name ) }}
resources : {{ ExtractAddressPoolToTFIndexMap $v.AddressPool "ip" }}
resources : {{ if $v.IPNetmask }}
resources : {{ $v.IPNetmask }}
resources : {{ end }}
resources : {{ ExtractAddressPoolToTFIndexMap $v.AddressPool "hostname" }}
resources : {{ Dash ( Lower $.ClusterName ) }}
resources : {{ Dash ( Lower $k ) }}
resources : {{ $.Domain }}
resources : {{ if ne $v.IPGateway "" }}
resources : {{ $v.IPGateway }}
resources : {{ end }}
resources : {{ QuoteList $.DNSServers }}
resources : {{ end }}
**/

const dataSourcesTpl = `# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

# data_sources.tf collects data and set's varaibles to be used later.  
# It does nothing to modify the images

data "vsphere_datacenter" "dc" {
  name = "{{ .Datacenter }}"
}

data "vsphere_datastore" "datastore" {
  name          = "{{ .Datastore }}"
  datacenter_id = data.vsphere_datacenter.dc.id
}

data "vsphere_resource_pool" "pool" {
  name          = "{{ .ResourcePool }}"
  datacenter_id = data.vsphere_datacenter.dc.id
}

data "vsphere_network" "network" {
  name          = "{{ .VsphereNet }}"
  datacenter_id = data.vsphere_datacenter.dc.id
}

{{ range $k, $v := .NodePools }}
data "vsphere_virtual_machine" "{{ Dash ( Lower $v.Name ) }}-template" {
  name          = "{{ $v.TemplateName }}"
  datacenter_id = data.vsphere_datacenter.dc.id
}
{{ end }}`

const outputTpl = `{{ $masterNodePool := MasterPool $.NodePools }}

output "service_ip" {
  value =
{{- if $.KubeVirtualIPApi -}}
  "{{- $.KubeVirtualIPApi -}}"
{{- else -}}  
  vsphere_virtual_machine.{{ Dash ( Lower $masterNodePool.Name ) }}.0.default_ip_address
{{- end }}
}

output "service_port" {
  value = "
{{- if and $.KubeVirtualIPApi $.KubeVIPAPISSLPort -}}
  {{- $.KubeVIPAPISSLPort -}}
{{- else -}} 
  {{- $.KubeAPISSLPort -}}
{{- end }}"
}

output "nodes" {
  value = [ {{- range $k, $v := $.NodePools -}} {{- range $i := Count $v.Count  }}
      "{\"private_ip\": \"${vsphere_virtual_machine.
      {{- Dash ( Lower $v.Name ) }}.{{ $i }}.default_ip_address}\",\"public_ip\": \"${vsphere_virtual_machine.
      {{- Dash ( Lower $v.Name ) }}.{{ $i }}.default_ip_address}\",\"public_dns\": \"${vsphere_virtual_machine.
      {{- Dash ( Lower $v.Name ) }}.{{ $i }}.name}\",\"private_dns\": \"${vsphere_virtual_machine.
      {{- Dash ( Lower $v.Name ) }}.{{ $i }}.name}\",\"pool\": \"{{ $v.Name }}\",\"role\": \"{{ Dash ( Lower $k ) }}\"}",{{ end }}{{ end }}
  ]
}`

const providerTpl = `# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

provider "vsphere" {
  user                  = var.vsphere_username
  password              = var.vsphere_password
  vsphere_server        = var.vsphere_server
  allow_unverified_ssl  = "true"
}

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
`

const resourcesTpl = `# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

# resources.tf collects creates the resources that will be used with the image.  
# Be careful with what you create as a resource, as you can overwrite existing 
# infrastructure easily.
{{ range $k, $v := .NodePools }}

# for backward compat, master and worker need to be dumb-master, dumb-worker ?
# TODO TEST UPDATE ON OLD CLUSTER
resource "vsphere_virtual_machine" "{{ Dash ( Lower $v.Name ) }}" {
  count = "{{ $v.Count }}"

  name = lookup({{ ExtractAddressPoolToTFIndexMap $v.AddressPool "hostname" }}, count.index, "{{ Dash ( Lower $.ClusterName ) }}-{{ Dash ( Lower $k ) }}-${format("%02d", count.index+1)}")

  resource_pool_id = data.vsphere_resource_pool.pool.id
  datastore_id     = data.vsphere_datastore.datastore.id

  folder   = "{{ $.Folder }}"
  num_cpus = "{{ $v.CPUs }}"
  memory   = "{{ $v.Memory }}"
  guest_id = data.vsphere_virtual_machine.{{- Dash ( Lower $v.Name ) -}}-template.guest_id

  scsi_type        = data.vsphere_virtual_machine.{{- Dash ( Lower $v.Name ) -}}-template.scsi_type
  enable_disk_uuid = "true"

  network_interface {
    network_id   = data.vsphere_network.network.id
    adapter_type = data.vsphere_virtual_machine.{{- Dash ( Lower $v.Name ) -}}-template.network_interface_types[0]
  }

  # leaving at single disk now, but templating will allow for multiples
  disk {
    label            = "{{ Dash ( Lower $.ClusterName ) }}-{{ Dash ( Lower $k ) }}-${format("%02d", count.index+1)}.vmdk"
    size             = "{{ $v.RootVolSize }}"
    eagerly_scrub    = data.vsphere_virtual_machine.{{ Dash ( Lower $v.Name ) }}-template.disks.0.eagerly_scrub
    thin_provisioned = data.vsphere_virtual_machine.{{ Dash ( Lower $v.Name ) }}-template.disks.0.thin_provisioned
    unit_number      = 0
  }

  extra_config = {
    "guestinfo.cloudinit.userdata" = "#cloud-config\nhostname: {{ Dash ( Lower $.ClusterName ) }}-{{ Dash ( Lower $k ) }}-${format("%02d", count.index+1)}\n\nssh_authorized_keys:\n  - \"{{ Trim $.PublicKey }}\n\""
  }

  clone {
    linked_clone  = "{{ $v.LinkedClone }}"
    template_uuid = data.vsphere_virtual_machine.{{ Dash ( Lower $v.Name ) }}-template.id

    customize {
      network_interface {
        ipv4_address = lookup({{ ExtractAddressPoolToTFIndexMap $v.AddressPool "ip" }}, count.index, "")

        {{ if $v.IPNetmask }}
        ipv4_netmask = "{{ $v.IPNetmask }}"
        {{ end }}
      }

      linux_options {
        host_name = lookup({{ ExtractAddressPoolToTFIndexMap $v.AddressPool "hostname" }}, count.index, "{{ Dash ( Lower $.ClusterName ) }}-{{ Dash ( Lower $k ) }}-${format("%02d", count.index+1)}")
        domain    = "{{ $.Domain }}"
      }

      {{ if ne $v.IPGateway "" }}
      ipv4_gateway    = "{{ $v.IPGateway }}"
      {{ end }}

      dns_server_list = [{{ QuoteList $.DNSServers }}]
    }
  }
}

{{ end }}
`

const variablesTpl = `variable "vsphere_username" {}
variable "vsphere_password" {}
variable "vsphere_server"   {}
`
