- name: apply CoreDNS manifest
  shell: "docker exec kubelet kubectl --kubeconfig=/var/lib/kubelet/kubeconfig apply {{ force_apply_flag }}-f /srv/kubernetes/manifests/coredns.yaml"

- name: assert CoreDNS Pods are ready
  shell: "docker exec kubelet kubectl --kubeconfig=/var/lib/kubelet/kubeconfig get pods -n kube-system | grep coredns"
  register: coredns_ready
  retries: 10
  delay: 30
  until: 
    - "'1/1' in coredns_ready.stdout"
    - "'Running' in coredns_ready.stdout"

- name: Check for exisiting KubeDNS artifacts
  shell: "docker exec kubelet kubectl --kubeconfig=/var/lib/kubelet/kubeconfig -n kube-system get {{ item.type }} {{ item.name }}"
  loop:
  - { type: 'ServiceAccount', name: 'kubedns-sa' }
  - { type: 'Role', name: 'kubedns-role' }
  - { type: 'ClusterRole', name: 'kubedns-cr' }
  - { type: 'ClusterRoleBinding', name: 'kubedns' }
  - { type: 'RoleBinding', name: 'kubedns-rb' }
  - { type: 'ConfigMap', name: 'kube-dns' }
  - { type: 'Deployment', name: 'kube-dns' }
  register: kube_dns_items
  failed_when: kube_dns_items.rc > 1

- name: Remove KubeDNS artifacts
  shell: "docker exec kubelet kubectl --kubeconfig=/var/lib/kubelet/kubeconfig -n kube-system delete {{ item.item.type }} {{ item.item.name }}"
  loop: "{{ kube_dns_items.results }}"
  when: item.rc == 0

- name: assert KubeDNS manifest absent
  file:
    path: "/srv/kubernetes/manifests/kubedns.yaml"
    state: absent
    
- name: Wait for DNS to come up
  wait_for:
    port: 53
    host: "{{ kube_cluster_dns }}"
    delay: 10
  # action has no previous state to compare. should be pass fail.
  changed_when: no