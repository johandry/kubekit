---
apiVersion: v1
kind: List
items:

  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: kube-state-metrics
      namespace: kube-system

  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: kube-state-metrics
    rules:
    - apiGroups: [""]
      resources:
      - configmaps
      - secrets
      - nodes
      - pods
      - services
      - resourcequotas
      - replicationcontrollers
      - limitranges
      - persistentvolumeclaims
      - persistentvolumes
      - namespaces
      - endpoints
      verbs: ["list", "watch"]
    - apiGroups: ["extensions"]
      resources:
      - daemonsets
      - deployments
      - replicasets
      verbs: ["list", "watch"]
    - apiGroups: ["apps"]
      resources:
      - statefulsets
      verbs: ["list", "watch"]
    - apiGroups: ["apps"]
      resources:
      - statefulsets
      verbs: ["list", "watch"]
    - apiGroups: ["batch"]
      resources:
      - cronjobs
      - jobs
      verbs: ["list", "watch"]
    - apiGroups: ["autoscaling"]
      resources:
      - horizontalpodautoscalers
      verbs: ["list", "watch"]
    - apiGroups: ["policy"]
      resources:
      - poddisruptionbudgets
      verbs: ["list", "watch"]

  - apiVersion: rbac.authorization.k8s.io/v1
    # kubernetes versions before 1.8.0 should use rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      namespace: kube-system
      name: kube-state-metrics-resizer
    rules:
    - apiGroups: [""]
      resources:
      - pods
      verbs: ["get"]
    - apiGroups: ["extensions"]
      resources:
      - deployments
      resourceNames: ["kube-state-metrics"]
      verbs: ["get", "update"]

  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: kube-state-metrics
      namespace: kube-system
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: kube-state-metrics-resizer
    subjects:
    - kind: ServiceAccount
      name: kube-state-metrics
      namespace: kube-system

  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: kube-state-metrics
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: kube-state-metrics
    subjects:
    - kind: ServiceAccount
      name: kube-state-metrics
      namespace: kube-system

  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: kube-state-metrics
      namespace: kube-system
      labels:
        app: kube-state-metrics
        version: "{{ current_manifest['dependencies']['core']['kube-state-metrics']['version'] }}"
        role: frontend
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: kube-state-metrics
      template:
        metadata:
          labels:
            app: kube-state-metrics
            version: "{{ current_manifest['dependencies']['core']['kube-state-metrics']['version'] }}"
            kubernetes.io/cluster-service: "true"
            role: frontend
        spec:
          serviceAccountName: kube-state-metrics
          priorityClassName: kube-system-high
          containers:
          - name: kube-state-metrics
            image: {{ core_repo_root }}{{ current_manifest['dependencies']['core']['kube-state-metrics']['src'] }}
            env:
            - name: GOMAXPROCS
              valueFrom:
                resourceFieldRef:
                  resource: limits.cpu
            command:
            - /kube-state-metrics
            - --port=8080
            - --telemetry-port=8081
            - --logtostderr
            ports:
            - name: http-metrics
              containerPort: 8080
            - name: telemetry
              containerPort: 8081
            readinessProbe:
              httpGet:
                path: /healthz
                port: 8080
              initialDelaySeconds: 5
              timeoutSeconds: 5
            resources:
              # keep request = limit to keep this container in guaranteed class
              requests:
                cpu: {{ kube_state_metrics_requests_cpu }}
                memory: {{ kube_state_metrics_requests_memory }}
{% if kube_state_metrics_limits_cpu or kube_state_metrics_limits_memory %}
              limits:
{% if kube_state_metrics_limits_cpu %}
                cpu: {{ kube_state_metrics_limits_cpu }}
{% endif %}
{% if kube_state_metrics_limits_memory %}
                memory: {{ kube_state_metrics_limits_memory }}
{% endif %}
{% endif %}
          - name: addon-resizer
            image: {{ core_repo_root }}{{ current_manifest['dependencies']['core']['addon-resizer']['src'] }}
            resources:
              requests:
                cpu: {{ kube_state_metrics_resizer_requests_cpu }}
                memory: {{ kube_state_metrics_resizer_requests_memory }}
{% if kube_state_metrics_resizer_limits_cpu or kube_state_metrics_resizer_limits_memory %}
              limits:
{% if kube_state_metrics_resizer_limits_cpu %}
                cpu: {{ kube_state_metrics_resizer_limits_cpu }}
{% endif %}
{% if kube_state_metrics_resizer_limits_memory %}
                memory: {{ kube_state_metrics_resizer_limits_memory }}
{% endif %}
{% endif %}
            env:
              - name: MY_POD_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: MY_POD_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
            command:
              - /pod_nanny
              - --container=kube-state-metrics
              - --cpu={{ kube_state_metrics_resizer_setting_cpu }}
              - --extra-cpu={{ kube_state_metrics_resizer_setting_extra_cpu }}
              - --memory={{ kube_state_metrics_resizer_setting_memory }}
              - --extra-memory={{ kube_state_metrics_resizer_setting_extra_memory }}
              - --threshold={{ kube_state_metrics_resizer_setting_threshold }}
              - --deployment=kube-state-metrics

  - apiVersion: v1
    kind: Service
    metadata:
      name: kube-state-metrics
      namespace: kube-system
      annotations:
        prometheus.io/scrape: "true"
      labels:
        kubernetes.io/cluster-service: "true"
        app: kube-state-metrics
    spec:
      ports:
      - name: http-metrics
        port: 8080
        targetPort: http-metrics
        protocol: TCP
        targetPort: http-metrics
      - name: telemetry
        port: 8081
        protocol: TCP
        targetPort: telemetry
      selector:
        app: kube-state-metrics
